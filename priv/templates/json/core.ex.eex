defmodule ExAws.<%= @module %>.Core do
  import ExAws.Core.<%= @protocol |> ExAwsGen.Service.protocol_name %>, only: [format_input: 1]
  @actions [
<%=
    @api["operations"]
    |> Map.keys
    |> Enum.map(&("    \"#{&1}\""))
    |> Enum.join(",\n")
  %>]

  @moduledoc """
  ## <%= @metadata["serviceFullName"] %>

<%= @docs["service"] |> ExAwsGen.DocParser.format %>
  """

<%= @typespec %>

<%= for {op, _} <- @api["operations"] do %>
  @doc """
  <%= op %>

<%= @docs["operations"][op] %>
  """
  def <%= Mix.Utils.underscore(op) %>(client, input) do
    request(client, "<%= op %>", format_input(input))
  end
<%= end %>

  defp request(%{__struct__: client_module} = client, action, input) do
    client_module.request(client, action, input)
  end
end
